{
  "parameters": [
    {
      "type": "ParameterTypeNumber",
      "index": 0,
      "name": "wobble_frequency",
      "paramId": "wobble_frequency",
      "minimum": 0.1,
      "maximum": 10,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.5,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_01_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 1,
      "name": "base_frequency",
      "paramId": "base_frequency",
      "minimum": 100,
      "maximum": 300,
      "exponent": 1,
      "steps": 0,
      "initialValue": 150,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_02_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 2,
      "name": "wobble_amp",
      "paramId": "wobble_amp",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 10,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s14",
      "constrainFunc": "param_03_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 3,
      "name": "volume",
      "paramId": "volume",
      "minimum": 0.1,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.75,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s12",
      "constrainFunc": "param_04_value_constrain"
    }
  ],
  "numParameters": 4,
  "numSignalInParameters": 0,
  "numSignalOutParameters": 0,
  "numInputChannels": 0,
  "numOutputChannels": 1,
  "numMidiInputPorts": 0,
  "numMidiOutputPorts": 0,
  "externalDataRefs": [],
  "patcherSerial": 0,
  "inports": [],
  "outports": [],
  "inlets": [],
  "outlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "out1",
      "meta": ""
    }
  ],
  "paramConversion": {
    "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
    "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 100 ? 100 : (value > 300 ? 300 : value));\r\n            let normalizedValue = (value - 100) / (300 - 100);\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0.1 ? 0.1 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0.1) / (1 - 0.1);\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0.1 ? 0.1 : (value > 10 ? 10 : value));\r\n            let normalizedValue = (value - 0.1) / (10 - 0.1);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
    "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 100 + value * (300 - 100);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0.1 + value * (1 - 0.1);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0.1 + value * (10 - 0.1);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
    "getNumParameters": "function getNumParameters() {\r\n    return 4;\r\n}",
    "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 10 ? 10 : (v < 0.1 ? 0.1 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 300 ? 300 : (v < 100 ? 100 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0.1 ? 0.1 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
    "subpatches": {},
    "isPolyphonic": false
  },
  "presetid": "rnbo",
  "meta": {
    "architecture": "x64",
    "filename": "simpleosc.maxpat",
    "maxversion": "8.5.2",
    "rnboversion": "1.0.2"
  }
}